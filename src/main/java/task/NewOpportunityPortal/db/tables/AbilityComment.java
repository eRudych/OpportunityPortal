/*
 * This file is generated by jOOQ.
 */
package task.NewOpportunityPortal.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import task.NewOpportunityPortal.db.Indexes;
import task.NewOpportunityPortal.db.Keys;
import task.NewOpportunityPortal.db.Public;
import task.NewOpportunityPortal.db.tables.records.AbilityCommentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbilityComment extends TableImpl<AbilityCommentRecord> {

    private static final long serialVersionUID = 1821684820;

    /**
     * The reference instance of <code>public.ability_comment</code>
     */
    public static final AbilityComment ABILITY_COMMENT = new AbilityComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbilityCommentRecord> getRecordType() {
        return AbilityCommentRecord.class;
    }

    /**
     * The column <code>public.ability_comment.id</code>.
     */
    public final TableField<AbilityCommentRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ability_comment.text</code>.
     */
    public final TableField<AbilityCommentRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.ability_comment</code> table reference
     */
    public AbilityComment() {
        this(DSL.name("ability_comment"), null);
    }

    /**
     * Create an aliased <code>public.ability_comment</code> table reference
     */
    public AbilityComment(String alias) {
        this(DSL.name(alias), ABILITY_COMMENT);
    }

    /**
     * Create an aliased <code>public.ability_comment</code> table reference
     */
    public AbilityComment(Name alias) {
        this(alias, ABILITY_COMMENT);
    }

    private AbilityComment(Name alias, Table<AbilityCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private AbilityComment(Name alias, Table<AbilityCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AbilityComment(Table<O> child, ForeignKey<O, AbilityCommentRecord> key) {
        super(child, key, ABILITY_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ABILITY_COMMENT_PKEY);
    }

    @Override
    public UniqueKey<AbilityCommentRecord> getPrimaryKey() {
        return Keys.ABILITY_COMMENT_PKEY;
    }

    @Override
    public List<UniqueKey<AbilityCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<AbilityCommentRecord>>asList(Keys.ABILITY_COMMENT_PKEY);
    }

    @Override
    public List<ForeignKey<AbilityCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AbilityCommentRecord, ?>>asList(Keys.ABILITY_COMMENT__FK_ABILITY_COMMENT_USER);
    }

    public UserAbility userAbility() {
        return new UserAbility(this, Keys.ABILITY_COMMENT__FK_ABILITY_COMMENT_USER);
    }

    @Override
    public AbilityComment as(String alias) {
        return new AbilityComment(DSL.name(alias), this);
    }

    @Override
    public AbilityComment as(Name alias) {
        return new AbilityComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AbilityComment rename(String name) {
        return new AbilityComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AbilityComment rename(Name name) {
        return new AbilityComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
