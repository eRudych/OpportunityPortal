/*
 * This file is generated by jOOQ.
 */
package task.NewOpportunityPortal.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import task.NewOpportunityPortal.db.Indexes;
import task.NewOpportunityPortal.db.Keys;
import task.NewOpportunityPortal.db.Public;
import task.NewOpportunityPortal.db.tables.records.UserAbilityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAbility extends TableImpl<UserAbilityRecord> {

    private static final long serialVersionUID = 895081216;

    /**
     * The reference instance of <code>public.user_ability</code>
     */
    public static final UserAbility USER_ABILITY = new UserAbility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAbilityRecord> getRecordType() {
        return UserAbilityRecord.class;
    }

    /**
     * The column <code>public.user_ability.id</code>.
     */
    public final TableField<UserAbilityRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_ability.authorId</code>.
     */
    public final TableField<UserAbilityRecord, Long> AUTHORID = createField(DSL.name("authorId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_ability.userId</code>.
     */
    public final TableField<UserAbilityRecord, Long> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_ability.assessment</code>.
     */
    public final TableField<UserAbilityRecord, Integer> ASSESSMENT = createField(DSL.name("assessment"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_ability.created_at</code>.
     */
    public final TableField<UserAbilityRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.user_ability</code> table reference
     */
    public UserAbility() {
        this(DSL.name("user_ability"), null);
    }

    /**
     * Create an aliased <code>public.user_ability</code> table reference
     */
    public UserAbility(String alias) {
        this(DSL.name(alias), USER_ABILITY);
    }

    /**
     * Create an aliased <code>public.user_ability</code> table reference
     */
    public UserAbility(Name alias) {
        this(alias, USER_ABILITY);
    }

    private UserAbility(Name alias, Table<UserAbilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAbility(Name alias, Table<UserAbilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserAbility(Table<O> child, ForeignKey<O, UserAbilityRecord> key) {
        super(child, key, USER_ABILITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_ABILITY_PKEY);
    }

    @Override
    public UniqueKey<UserAbilityRecord> getPrimaryKey() {
        return Keys.USER_ABILITY_PKEY;
    }

    @Override
    public List<UniqueKey<UserAbilityRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAbilityRecord>>asList(Keys.USER_ABILITY_PKEY);
    }

    @Override
    public List<ForeignKey<UserAbilityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserAbilityRecord, ?>>asList(Keys.USER_ABILITY__FK_USER_ABILITY_AUTHOR, Keys.USER_ABILITY__FK_USER_ABILITY_USER);
    }

    public User userAbility_FkUserAbilityAuthor() {
        return new User(this, Keys.USER_ABILITY__FK_USER_ABILITY_AUTHOR);
    }

    public User userAbility_FkUserAbilityUser() {
        return new User(this, Keys.USER_ABILITY__FK_USER_ABILITY_USER);
    }

    @Override
    public UserAbility as(String alias) {
        return new UserAbility(DSL.name(alias), this);
    }

    @Override
    public UserAbility as(Name alias) {
        return new UserAbility(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAbility rename(String name) {
        return new UserAbility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAbility rename(Name name) {
        return new UserAbility(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, Integer, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
